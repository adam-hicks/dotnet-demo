using System; using System.Collections.Generic; using System.IO; using Dynastream.Fit; using PeakswareTest.Models;  namespace PeakswareTest.Data {     public static class FitImportFull     {           static Dictionary<ushort, int> mesgCounts = new Dictionary<ushort, int>();         private static System.DateTime? _start;         private static Workout workout = new Workout();          public static Workout ImportData(string filename)         {             // Check if file exists in specified path. Catches errors in path or filename.             if (!System.IO.File.Exists(filename))             {                 return null;             }             // Open file             using (var fitSource = new FileStream(filename, FileMode.Open))             {                 Decode decodeDemo = new Decode();                 MesgBroadcaster mesgBroadcaster = new MesgBroadcaster();                  // Connect the Broadcaster to our event source (in this case the Decoder)                 decodeDemo.MesgEvent += mesgBroadcaster.OnMesg;                 // Message definition events allow for catching specific types such as session, lap, and record. I ignored others for this exercise.                  decodeDemo.MesgDefinitionEvent += mesgBroadcaster.OnMesgDefinition;                  // Subscribe to message events of interest by connecting to the Broadcaster                 // Gets the file creation date/time (for summary and offsets)                 mesgBroadcaster.FileIdMesgEvent += OnFileIDMesg;                 // Collect session info. Assumed here one session per workout, but I understand that multisport is most likely handled with multiiple sessions/workout.                 mesgBroadcaster.SessionMesgEvent += OnSessionMesg;                 // I did not utilize lap info, but collected it so that lap summaries could be reported.                 mesgBroadcaster.LapMesgEvent += OnLapMesg;                 // Raw data for each record interval across all data channels 				mesgBroadcaster.RecordMesgEvent += OnRecordMesg;                  // I know the file exists at this point. Check if the data can be read as .fit.                 bool status = decodeDemo.IsFIT(fitSource) && decodeDemo.CheckIntegrity(fitSource);                 // Process the file                 if (status)                 {                     decodeDemo.Read(fitSource);                 }                 else                 {                     return null;                 }             }             workout.Timestamp = _start;             return workout;         }          // I could not find a way to cast messages to their types without calling the message types specifically. It was only needed for time offsets. Otherwise, a single OnMesg method could have sufficed to collect data.         static void OnSessionMesg(object sender, MesgEventArgs e)         {             SessionMesg sessionMesg = (SessionMesg)e.mesg;  			Session session = new Session();             foreach (Field field in e.mesg.Fields)             {                 for (int j = 0; j < field.GetNumValues(); j++)                 {                     session.SessionMetrics.Add(field.GetName(), field.GetValue());                 }             } 			workout.Session = session;         }          static void OnLapMesg(object sender, MesgEventArgs e)         {             LapMesg lapMesg = (LapMesg)e.mesg;              foreach (Field field in e.mesg.Fields)             {                 for (int j = 0; j < field.GetNumValues(); j++)                 {                     Lap lap = new Lap();                     lap.LapMetrics.Add(field.GetName(), field.GetValue());                     lap.Timestamp = (lapMesg.GetTimestamp().GetDateTime());                     workout.Laps.Add(lap);                 }             }         }          static void OnRecordMesg(object sender, MesgEventArgs e)         {             RecordMesg recordMesg = (RecordMesg)e.mesg;              foreach (Field field in e.mesg.Fields)             {                 for (int j = 0; j < field.GetNumValues(); j++)                 {                     Record record = new Record();                     record.RecordMetrics.Add(field.GetName(), field.GetValue());                     record.Timestamp = (recordMesg.GetTimestamp().GetDateTime());                     workout.Records.Add(record);                 }             }         }          static void OnFileIDMesg(object sender, MesgEventArgs e)         {             FileIdMesg myFileId = (FileIdMesg)e.mesg;              if (myFileId.GetTimeCreated() != null)             {                 _start = myFileId.GetTimeCreated().GetDateTime();             }         }     } }   