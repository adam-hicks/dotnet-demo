{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green150\blue149;\red34\green34\blue34;\red51\green99\blue164;
\red219\green113\blue0;\red136\green138\blue133;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c58824\c58431;\csgenericrgb\c13333\c13333\c13333;\csgenericrgb\c20000\c38824\c64314;
\csgenericrgb\c85882\c44314\c0;\csgenericrgb\c53333\c54118\c52157;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 using\cf3  System;\uc0\u8232 \cf2 using\cf3  System.Collections.Generic;\uc0\u8232 \cf2 using\cf3  System.IO;\uc0\u8232 \cf2 using\cf3  Dynastream.Fit;\uc0\u8232 \cf2 using\cf3  PeakswareTest.Models;\uc0\u8232 \u8232 \cf2 namespace\cf3  PeakswareTest.Data\uc0\u8232 \{\u8232     \cf2 public\cf3  \cf2 static\cf3  \cf2 class\cf3  \cf4 FitImportFull\uc0\u8232 \cf3     \{\uc0\u8232         \cf2 private\cf3  \cf2 static\cf3  \cf2 readonly\cf3  \cf2 double\cf3  SPEED_MPH_FROM_MPS = \cf5 2.24\cf3 ;\uc0\u8232         \cf2 private\cf3  \cf2 static\cf3  \cf2 readonly\cf3  \cf2 double\cf3  DISTANCE_METERS_TO_MILES = \cf5 .0006214\cf3 ;\uc0\u8232         \cf2 static\cf3  \cf4 Dictionary\cf3 <\cf2 ushort\cf3 , \cf2 int\cf3 > mesgCounts = \cf2 new\cf3  \cf4 Dictionary\cf3 <\cf2 ushort\cf3 , \cf2 int\cf3 >();\uc0\u8232         \cf2 private\cf3  \cf2 static\cf3  \cf4 List\cf3 <\cf4 DataChannel\cf3 > dataChannels;\uc0\u8232         \cf2 private\cf3  \cf2 static\cf3  System.\cf4 DateTime\cf3 ? _start;\uc0\u8232         \cf2 private\cf3  \cf2 static\cf3  \cf2 string\cf3 [] channelsOfInterest = \{ \cf5 "Power"\cf3 , \cf5 "HeartRate"\cf3 , \cf5 "Cadence"\cf3  \};\uc0\u8232 \u8232         \cf2 public\cf3  \cf2 static\cf3  \cf2 readonly\cf3  \cf2 double\cf3  DISTANCE_METERS_TO_FEET = \cf5 3.281\cf3 ;\uc0\u8232 \u8232         \cf2 public\cf3  \cf2 static\cf3  \cf4 Workout\cf3  ImportData(\cf2 string\cf3  filename)\uc0\u8232         \{\u8232             \cf6 // Attempt to open .FIT file\uc0\u8232 \cf3             \cf2 if\cf3  (!System.IO.\cf4 File\cf3 .Exists(filename))\uc0\u8232             \{\u8232                 \cf2 return\cf3  \cf2 null\cf3 ;\uc0\u8232             \}\u8232             \cf2 using\cf3  (\cf2 var\cf3  fitSource = \cf2 new\cf3  \cf4 FileStream\cf3 (filename, \cf4 FileMode\cf3 .Open))\uc0\u8232             \{\u8232                 \cf6 //InitializeDataChannels();\uc0\u8232 \u8232 \cf3                 \cf4 Decode\cf3  decodeDemo = \cf2 new\cf3  \cf4 Decode\cf3 ();\uc0\u8232                 \cf4 MesgBroadcaster\cf3  mesgBroadcaster = \cf2 new\cf3  \cf4 MesgBroadcaster\cf3 ();\uc0\u8232 \u8232                 \cf6 // Connect the Broadcaster to our event source (in this case the Decoder)\uc0\u8232 \cf3                 decodeDemo.MesgEvent += mesgBroadcaster.OnMesg;\uc0\u8232 \u8232                 \cf6 // Subscribe to message events of interest by connecting to the Broadcaster\uc0\u8232 \cf3                 mesgBroadcaster.MesgEvent += OnMesg;\uc0\u8232                 \cf6 //mesgBroadcaster.RecordMesgEvent += OnRecordMesg;\uc0\u8232 \cf3                 mesgBroadcaster.FileIdMesgEvent += OnFileIDMesg;\uc0\u8232 \u8232                 \cf2 bool\cf3  status = decodeDemo.IsFIT(fitSource) && decodeDemo.CheckIntegrity(fitSource);\uc0\u8232                 \cf6 // Process the file\uc0\u8232 \cf3                 \cf2 if\cf3  (status)\uc0\u8232                 \{\u8232                     decodeDemo.Read(fitSource);\u8232                 \}\u8232                 \cf2 else\uc0\u8232 \cf3                 \{\uc0\u8232                     \cf2 return\cf3  \cf2 null\cf3 ;\uc0\u8232                 \}\u8232             \}\u8232             \cf4 Workout\cf3  workout = \cf2 new\cf3  \cf4 Workout\uc0\u8232 \cf3             \{\uc0\u8232                 StartTime = _start,\u8232                 DataChannels = dataChannels\u8232             \};\u8232             \cf2 return\cf3  workout;\uc0\u8232         \}\u8232 \u8232         \cf6 //private static void InitializeDataChannels()\uc0\u8232 \cf3         \cf6 //\{\uc0\u8232 \cf3         \cf6 //    dataChannels = new List<DataChannel>();\uc0\u8232 \cf3         \cf6 //    foreach (string channelType in channelsOfInterest)\uc0\u8232 \cf3         \cf6 //    \{\uc0\u8232 \cf3         \cf6 //        DataChannel channel = new DataChannel\uc0\u8232 \cf3         \cf6 //        \{\uc0\u8232 \cf3         \cf6 //            Data = new Dictionary<double, int>(),\uc0\u8232 \cf3         \cf6 //            DataType = channelType\uc0\u8232 \cf3         \cf6 //        \};\uc0\u8232 \cf3         \cf6 //        dataChannels.Add(channel);\uc0\u8232 \cf3         \cf6 //    \}\uc0\u8232 \u8232 \cf3         \cf6 //\}\uc0\u8232 \u8232 \cf3         \cf6 //static void OnRecordMesg(object sender, MesgEventArgs e)\uc0\u8232 \cf3         \cf6 //\{\uc0\u8232 \cf3         \cf6 //    Console.WriteLine("=============================================================================================");\uc0\u8232 \cf3         \cf6 //    Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");\uc0\u8232 \cf3         \cf6 //    Console.WriteLine("Entering OnRecordMesg Method");\uc0\u8232 \cf3         \cf6 //    Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");\uc0\u8232 \cf3         \cf6 //    var record = (RecordMesg)e.mesg;\uc0\u8232 \u8232 \cf3         \cf6 //    WriteFieldWithOverrides(record, RecordMesg.FieldDefNum.HeartRate);\uc0\u8232 \cf3         \cf6 //    WriteFieldWithOverrides(record, RecordMesg.FieldDefNum.Cadence);\uc0\u8232 \cf3         \cf6 //    WriteFieldWithOverrides(record, RecordMesg.FieldDefNum.Speed);\uc0\u8232 \cf3         \cf6 //    WriteFieldWithOverrides(record, RecordMesg.FieldDefNum.Distance);\uc0\u8232 \u8232 \cf3         \cf6 //    foreach (string channelType in channelsOfInterest)\uc0\u8232 \cf3         \cf6 //    \{\uc0\u8232 \cf3         \cf6 //        var data = record.GetFieldValue(channelType);\uc0\u8232 \cf3         \cf6 //        if (data != null)\uc0\u8232 \cf3         \cf6 //        \{\uc0\u8232 \cf3         \cf6 //            double timeOffset = GetTimeOffset(record.GetTimestamp().GetDateTime());\uc0\u8232 \cf3         \cf6 //            dataChannels.Find(channel => channel.DataType.Equals(channelType)).Data.Add(timeOffset, Convert.ToInt32(data));\uc0\u8232 \cf3         \cf6 //        \}\uc0\u8232 \cf3         \cf6 //    \}\uc0\u8232 \u8232 \cf3         \cf6 //\}\uc0\u8232 \u8232 \cf3         \cf6 //private static void WriteFieldWithOverrides(Mesg mesg, byte fieldNumber)\uc0\u8232 \cf3         \cf6 //\{\uc0\u8232 \cf3         \cf6 //    Field profileField = Profile.GetField(mesg.Num, fieldNumber);\uc0\u8232 \cf3         \cf6 //    bool nameWritten = false;\uc0\u8232 \u8232 \cf3         \cf6 //    if (null == profileField)\uc0\u8232 \cf3         \cf6 //    \{\uc0\u8232 \cf3         \cf6 //        return;\uc0\u8232 \cf3         \cf6 //    \}\uc0\u8232 \u8232 \cf3         \cf6 //    IEnumerable<FieldBase> fields = mesg.GetOverrideField(fieldNumber);\uc0\u8232 \cf3         \cf6 //    Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");\uc0\u8232 \cf3         \cf6 //    Console.WriteLine("Writing Field With Overrides");\uc0\u8232 \cf3         \cf6 //    Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");\uc0\u8232 \u8232 \cf3         \cf6 //    foreach (FieldBase field in fields)\uc0\u8232 \cf3         \cf6 //    \{\uc0\u8232 \cf3         \cf6 //        if (!nameWritten)\uc0\u8232 \cf3         \cf6 //        \{\uc0\u8232 \cf3         \cf6 //            Console.WriteLine("   \{0\}", profileField.GetName());\uc0\u8232 \cf3         \cf6 //            nameWritten = true;\uc0\u8232 \cf3         \cf6 //        \}\uc0\u8232 \u8232 \cf3         \cf6 //        if (field is Field)\uc0\u8232 \cf3         \cf6 //        \{\uc0\u8232 \cf3         \cf6 //            if (profileField.GetName() == "Speed") \{\uc0\u8232 \cf3         \cf6 //                field.SetValue((double)Convert.ToDecimal(field.GetValue()) * SPEED_MPH_FROM_MPS);\uc0\u8232 \cf3         \cf6 //            \} else if(profileField.GetName() == "Distance") \{\uc0\u8232 \cf3         \cf6 //                field.SetValue((double)Convert.ToDecimal(field.GetValue()) * DISTANCE_METERS_TO_MILES);\uc0\u8232 \cf3         \cf6 //            \}\uc0\u8232 \cf3         \cf6 //            Console.WriteLine("      native: \{0\}", field.GetValue());\uc0\u8232 \cf3         \cf6 //        \}\uc0\u8232 \cf3         \cf6 //        else\uc0\u8232 \cf3         \cf6 //        \{\uc0\u8232 \cf3         \cf6 //            Console.WriteLine("      override: \{0\}", field.GetValue());\uc0\u8232 \cf3         \cf6 //        \}\uc0\u8232 \cf3         \cf6 //    \}\uc0\u8232 \cf3         \cf6 //\}\uc0\u8232 \u8232 \cf3         \cf2 static\cf3  \cf2 void\cf3  OnMesg(\cf2 object\cf3  sender, \cf4 MesgEventArgs\cf3  e)\uc0\u8232         \{\u8232             \cf6 //Console.WriteLine("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");\uc0\u8232 \cf3             \cf6 //Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");\uc0\u8232 \cf3             \cf6 //Console.WriteLine("Entering OnMesg Method");\uc0\u8232 \cf3             \cf6 //Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");\uc0\u8232 \u8232 \cf3             \cf6 //Console.WriteLine("OnMesg: Received Mesg with global ID#\{0\}, its name is \{1\}", e.mesg.Num, e.mesg.Name);\uc0\u8232 \u8232 \cf3             \cf6 //Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");\uc0\u8232 \cf3             \cf6 //Console.WriteLine("OnMesg - Writing Fields");\uc0\u8232 \cf3             \cf6 //Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");\uc0\u8232 \cf3             \cf2 if\cf3  (e.mesg.Name == \cf5 "Record"\cf3 )\uc0\u8232             \{\u8232                 \cf2 var\cf3  record = (\cf4 RecordMesg\cf3 )e.mesg;\uc0\u8232                 \cf2 if\cf3  (dataChannels == \cf2 null\cf3 )\uc0\u8232                 \{\u8232                     dataChannels = \cf2 new\cf3  \cf4 List\cf3 <\cf4 DataChannel\cf3 >();\uc0\u8232                 \}\u8232 \u8232                 \cf2 int\cf3  i = \cf5 0\cf3 ;\uc0\u8232                 \cf2 foreach\cf3  (\cf4 Field\cf3  field \cf2 in\cf3  e.mesg.Fields)\uc0\u8232                 \{\u8232                     \cf2 for\cf3  (\cf2 int\cf3  j = \cf5 0\cf3 ; j < field.GetNumValues(); j++)\uc0\u8232                     \{\u8232                         \cf2 switch\cf3  (field.GetName())\uc0\u8232                         \{\u8232                             \cf2 case\cf3  \cf5 "Speed"\cf3 :\uc0\u8232                                 field.SetValue((\cf2 double\cf3 )\cf4 Convert\cf3 .ToDecimal(field.GetValue()) * SPEED_MPH_FROM_MPS);\uc0\u8232                                 \cf2 break\cf3 ;\uc0\u8232                             \cf2 case\cf3  \cf5 "Distance"\cf3 :\uc0\u8232                                 field.SetValue((\cf2 double\cf3 )\cf4 Convert\cf3 .ToDecimal(field.GetValue()) * DISTANCE_METERS_TO_MILES);\uc0\u8232                                 \cf2 break\cf3 ;\uc0\u8232                             \cf2 case\cf3  \cf5 "Altitude"\cf3 :\uc0\u8232                                 field.SetValue((\cf2 double\cf3 )\cf4 Convert\cf3 .ToDecimal(field.GetValue()) * DISTANCE_METERS_TO_FEET);\uc0\u8232                                 \cf2 break\cf3 ;\uc0\u8232                             \cf2 default\cf3 :\uc0\u8232                                 \cf2 break\cf3 ;\uc0\u8232                         \}\u8232 \u8232                         System.\cf4 Predicate\cf3 <\cf4 DataChannel\cf3 > dataTypeFilter = channel => channel.DataType.Equals(field.GetName());\uc0\u8232                         \cf4 DataChannel\cf3  dataChannel = \cf2 null\cf3 ;\uc0\u8232                         dataChannel = dataChannels.Find(dataTypeFilter);\u8232                         \cf2 if\cf3  (dataChannel == \cf2 null\cf3 ) \{\uc0\u8232                             dataChannel = \cf2 new\cf3  \cf4 DataChannel\cf3 ();\uc0\u8232                             dataChannel.DataType = field.GetName();\u8232                         \}\u8232                         \cf2 double\cf3  timeOffset = GetTimeOffset(record.GetTimestamp().GetDateTime());\uc0\u8232                         dataChannel.Data.Add(timeOffset, (\cf2 double\cf3 )\cf4 Convert\cf3 .ToDecimal(field.GetValue()));\uc0\u8232 \u8232                         \cf4 Console\cf3 .WriteLine(\cf5 "\\tField\{0\} Index\{1\} (\\"\{2\}\\" Field#\{4\}) Value: \{3\} (raw value \{5\})"\cf3 ,\uc0\u8232                             i,\u8232                             j,\u8232                             field.GetName(),\u8232                             field.GetValue(j),\u8232                             field.Num,\u8232                             field.GetRawValue(j));\u8232                     \}\u8232 \u8232                     i++;\u8232                 \}\u8232             \}\u8232 \u8232             \cf2 if\cf3  (mesgCounts.ContainsKey(e.mesg.Num))\uc0\u8232             \{\u8232                 mesgCounts[e.mesg.Num]++;\u8232             \}\u8232             \cf2 else\uc0\u8232 \cf3             \{\uc0\u8232                 mesgCounts.Add(e.mesg.Num, \cf5 1\cf3 );\uc0\u8232             \}\u8232 			\cf4 Console\cf3 .WriteLine(\cf5 "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"\cf3 );\uc0\u8232         \}\u8232 \u8232         \cf2 static\cf3  \cf2 double\cf3  GetTimeOffset(System.\cf4 DateTime\cf3  date)\uc0\u8232         \{\u8232             \cf2 if\cf3  (_start == \cf2 null\cf3 )\uc0\u8232                 \cf2 return\cf3  \cf5 0\cf3 ;\uc0\u8232 \u8232             \cf2 return\cf3  date.Subtract(_start.Value).TotalMilliseconds;\uc0\u8232         \}\u8232 \u8232         \cf2 static\cf3  \cf2 void\cf3  OnFileIDMesg(\cf2 object\cf3  sender, \cf4 MesgEventArgs\cf3  e)\uc0\u8232         \{\u8232             \cf4 FileIdMesg\cf3  myFileId = (\cf4 FileIdMesg\cf3 )e.mesg;\uc0\u8232 \u8232             _start = myFileId.GetTimeCreated().GetDateTime();\u8232         \}\u8232     \}\u8232 \}\u8232 \u8232 }